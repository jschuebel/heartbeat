// 1.  Very simple websocket server:
// 	1a. Echo incoming message to all connected clients
// 	1b. Generate random numbers and emit to connected clients
var ws = require('nodejs-websocket');

// 2. Server for incoming/outgoing chats
var chatServer = ws.createServer(function (conn) {
	console.log('New Chat connection established.', new Date().toLocaleTimeString());
	conn.on('text', function (msg) {

		console.log('chatserver on text function');
		// simple object transformation (= add current time)
		var msgObj = JSON.parse(msg);
		msgObj.newDate = new Date().toLocaleTimeString();

		var newMsg = JSON.stringify(msgObj);

		
		console.log('about to write newMsg');
		console.log(newMsg);

		// echo message including the new field to all connected clients
		chatServer.connections.forEach(function (conct) {
			conct.sendText(newMsg);
		});
	});
	conn.on('close', function (code, reason) {
		console.log('Chat connection closed.', new Date().toLocaleTimeString(), 'code: ', code);
	});

	conn.on('error', function (err) {
		// only throw if something else happens than Connection Reset
		if (err.code !== 'ECONNRESET') {
			console.log('Error in Chat Socket connection', err);
			throw  err;
		}
	})
}).listen(3005, function () {
	console.log('Chat socketserver running on localhost:3005');
});

// 3. Server for emitting random data.
// Is this best practice? Starting new server on another port, or can
// the original server (on 3005) listen to different URL for example and
// emit other data?
var dataServer = ws.createServer(function (conn) {
	console.log('New Random number connection established, ', new Date().toLocaleTimeString());

	conn.on('close', function (code, reason) {
		console.log('Data connection closed.', new Date().toLocaleTimeString(), 'code: ', code);
	});

	conn.on('error', function (err) {
		// only throw if something else happens than Connection Reset
		if (err.code !== 'ECONNRESET') {
			console.log('Error in random number server', err);
		}
	})
}).listen(3006, function () {
	console.log('Random number server running on localhost:3006');
});

// 4. Generate a random number between 0-10,000, every second
setInterval(function () {
	// Only emit numbers if there are active connections
	if (dataServer.connections.length > 0) {
		var randomNumber = (Math.floor(Math.random() * 10000) + 1).toString();
		//console.log(randomNumber);
		dataServer.connections.forEach((function (conct) {
			conct.send(randomNumber)
		}));
	}
}, 1000);


// 5. Server for incoming/outgoing chunks
var chunkServer = ws.createServer(function (conn) {
	console.log('New Chunk connection established.', new Date().toLocaleTimeString());
	conn.on('text', function (msg) {
		// simple object transformation (= add current time)
		console.log('chunkserver:ontext:msg');
		console.log(msg);
		var msgObj = JSON.parse(msg);
		
		// echo message including the new field to all connected clients
		chunkServer.connections.forEach(function (conct) {
			//var a = new Uint16Array([6,0,206,2,0,0,196,2,0,0,182,2,0,0,157,2,0,0,117,2,0,0,66,2,0,0,4,2,0,0,198,1,0,0,147,1,0,0,114,1,0,0,87,1,0,0,56,1,0,0]);
			//1,111 is length then lowbyt,hibyte,lowhr,hihr
		   //var a = new Uint16Array([3,232,0,0,0,1,0,4,0,6,0,5,0,8,0,12,0,13,0,13,0,17,0,24,0,27,0,25,0,28,0,33,0,41,0,43,0,44,0,50,0,56,0,60,0,66,0,72,0,79,0,82,0,86,0,96,0,106,0,109,0,114,0,124,0,138,0,151,0,162,0,176,0,192,0,204,0,213,0,222,0,224,0,217,0,206,0,199,0,198,0,195,0,189,0,181,0,164,0,134,0,99,0,67,0,43,0,28,0,15,0,0,255,248,255,247,255,248,255,248,255,248,255,251,255,252,255,247,255,246,255,252,255,254,255,248,255,244,255,247,255,253,255,250,255,247,255,250,255,252,255,250,255,247,255,246,255,249,255,253,255,248,255,249,255,254,255,253,255,247,255,246,255,252,255,254,255,247,255,244,255,250,255,255,255,249,255,247,255,249,255,255,255,252,255,248,255,251,255,254,255,249,255,248,255,250,255,253,255,253,255,247,255,249,255,253,255,252,255,247,255,247,255,251,255,252,255,249,255,249,255,252,255,250,255,247,255,251,0,8,0,27,0,43,0,58,0,75,0,89,0,99,0,105,0,111,0,115,0,112,0,106,0,103,0,97,0,85,0,71,0,57,0,40,0,22,0,2,255,246,255,249,255,252,255,248,255,246,255,249,255,252,255,246,255,245,255,247,255,253,255,252,255,248,255,248,255,250,255,250,255,248,255,248,255,250,255,245,255,202,255,123,255,80,255,172,0,90,1,28,1,226,2,167,3,81,3,103,2,205,1,253,1,39,0,80,255,138,255,44,255,94,255,184,255,233,255,244,255,245,255,241,255,242,255,247,255,246,255,242,255,241,255,245,255,247,255,244,255,245,255,249,255,253,255,252,255,250,0,2,0,10,0,6,0,5,0,10,0,15,0,17,0,17,0,21,0,31,0,38,0,40,0,42,0,51,0,55,0,55,0,59,0,71,0,81,0,82,0,85,0,95,0,103,0,105,0,112,0,130,0,149,0,162,0,170,0,184,0,197,0,204,0,206,0,206,0,205,0,195,0,182,0,181,0,184,0,177,0,154,0,125,0,96,0,63,0,35,0,14,0,2,255,250,255,240,255,236,255,240,255,242,255,239,255,235,255,234,255,238,255,240,255,239,255,240,255,244,255,240,255,234,255,235,255,240,255,243,255,239,255,237,255,239,255,241,255,238,255,238,255,241,255,242,255,240,255,237,255,238,255,242,255,241,255,236,255,236,255,239,255,240,255,239,255,237,255,238,255,237,255,236,255,241,255,242,255,239,255,238,255,240,255,242,255,241,255,238,255,237,255,240,255,244,255,239,255,234,255,239,255,245,255,243,255,237,255,239,255,240,255,239,255,237,255,238,255,242,255,246,255,248,0,4,0,27,0,49,0,59,0,68,0,81,0,95,0,97,0,97,0,101,0,104,0,96,0,82,0,77,0,72,0,58,0,33,0,15,0,0,255,246,255,237,255,237,255,242,255,241,255,237,255,235,255,237,255,239,255,238,255,236,255,237,255,242,255,239,255,234,255,235,255,242,255,243,255,236,255,233,255,213,255,139,255,66,255,119,0,30,0,225,1,166,2,107,3,35,3,105,2,242,2,43,1,88,0,128,255,172,255,32,255,56,255,156,255,216,255,230,255,236,255,238,255,235,255,233,255,237,255,238,255,237,255,234,255,234,255,238,255,239,255,237,255,236,255,241,255,245,255,243,255,244,255,253,0,2,0,3,0,2,0,7,0,11,0,12,0,16,0,23,0,31,0,32,0,31,0,40,0,49,0,51,0,53,0,59,0,70,0,78,0,81,0,86,0,95,0,107,0,116,0,127,0,147,0,166,0,174,0,181,0,197,0,207,0,203,0,191,0,184,0,183,0,177,0,167,0,162,0,158,0,136,0,97,0,61,0,36,0,18,0,0,255,242,255,235,255,234,255,230,255,228,255,228,255,230,255,230,255,228,255,229,255,234,255,231,255,226,255,230,255,234,255,232,255,226,255,227,255,232,255,235,255,229,255,227,255,231,255,231,255,226,255,228,255,232,255,232,255,227,255,226,255,229,255,231,255,229,255,228,255,229,255,233,255,230,255,226,255,227,255,231,255,230,255,226,255,227,255,232,255,230,255,226,255,227,255,229,255,229,255,227,255,228,255,231,255,231,255,228,255,229,255,233,255,233,255,229,255,228,255,230,255,232,255,234,255,232,255,233,255,239,255,252,0,12,0,32,0,52,0,64,0,68,0,77,0,91,0,98,0,94,0,91,0,91,0,86,0,73,0,61,0,53,0,38,0,13,255,249,255,238,255,234,255,229,255,228,255,230,255,235,255,234,255,230,255,232,255,232,255,232,255,228,255,228,255,232,255,233,255,231,255,228,255,229,255,229,255,228,255,211,255,150,255,74,255,84,255,228,0,170,1,111,2,45,2,235,3,100,3,31,2,91,1,131,0,177,255,227,255,59,255,35,255,118,255,197,255,224,255,225,255,223,255,225,255,228,255,226,255,221,255,224,255,228,255,227,255,226,255,229,255,234,255,235,255,235,255,237,255,243,255,243,255,242,255,246,255,252,0,0,0,1,0,3,0,8,0,14,0,14,0,15,0,24,0,32,0,33,0,34,0,45,0,53,0,57,0,61,0,70,0,79,0,84,0,87,0,91,0,105,0,121,0,132,0,150,0,166,0,176,0,184,0,192,0,195,0,193,0,185,0,174,0,171,0,169,0,161,0,150,0,128,0,98,0,62,0,26,0,9,255,254,255,237,255,222,255,219,255,223,255,226,255,223,255,226,255,227,255,223,255,222,255,225,255,223,255,221,255,220,255,220,255,221,255,222,255,220,255,224,255,225,255,223,255,222,255,224,255,226,255,226,255,224,255,222,255,224,255,224,255,222,255,223,255,227,255,227,255,224,255,220,255,224,255,225,255,223,255,220,255,223,255,224,255,221,255,219,255,223,255,224,255,224,255,223,255,224,255,228,255,228,255,226,255,225,255,225,255,225,255,223,255,223,255,226,255,228,255,225,255,221,255,226,255,231,255,227,255,228,255,241,0,3,0,24,0,40,0,51,0,62,0,71,0,76,0,80,0,86,0,86,0,82,0,77,0,71,0,62,0,49,0,30,0,13,255,254,255,233,255,222,255,224,255,226,255,223,255,223,255,226,255,226,255,223,255,219,255,222,255,226,255,224,255,221,255,226,255,229,255,226,255,218,255,218,255,222,255,214,255,164,255,83,255,64,255,182,0,106,1,44,1,246,2,186,3,73,3,51,2,141,1,189,0,228,0,12,255,79,255,16,255,87,255,174,255,213,255,222,255,221,255,215,255,215,255,220,255,222,255,220,255,221,255,222,255,224,255,223,255,224,255,228,255,227,255,227,255,228,255,234,255,240,255,241,255,243,255,249,255,252,255,251,255,255,0,6,0,13,0,16,0,16,0,20,0,27,0,32,0,34,0,38,0,50,0,57,0,63,0,68,0,74,0,79,0,84,0,96,0,112,0,129,0,140,0,148,0,164,0,178,0,189,0,185,0,177,0,174,0,167,0,163,0,158,0,155,0,152,0,130,0,96,0,65,0,36,0,9,255,250,255,240,255,229,255,217,255,214,255,216,255,219,255,217,255,215,255,216,255,217,255,218,255,216,255,213,255,216,255,216,255,214,255,215,255,220,255,221,255,216,255,214,255,218,255,218,255,218,255,219,255,221,255,220,255,217,255,214,255,216,255,220,255,220,255,215,255,217,255,222,255,222,255,218,255,216,255,219,255,221,255,220,255,218,255,222,255,222,255,217,255,215,255,218,255,218,255,217,255,217,255,218,255,221,255,216,255,211,255,214,255,222,255,224,255,220,255,219,255,222,255,223,255,218,255,218,255,223,255,224,255,228,255,245,0,8,0,28,0,41,0,50,0,65,0,79,0,79,0,77,0,79,0,81,0,75,0,65,0,57,0,49,0,35,0,14,255,249,255,234,255,226,255,220,255,221,255,222,255,219,255,216,255,215,255,221,255,222,255,215,255,216,255,223,255,224,255,218,255,218,255,222,255,221,255,219,255,217,255,214,255,181,255,101,255,44,255,128,0,52,0,249,1,182,2,119,3,45,3,82,2,189,1,239,1,28,0,71,255,123,255,11,255,54,255,149,255,203,255,213,255,214,255,217,255,217,255,214,255,214,255,216,255,217,255,216,255,214,255,217,255,217,255,216,255,221,255,226,255,229,255,227,255,227,255,235,255,241,255,241,255,243,255,247,255,255,0,0,0,0,0,6,0,14,0,14,0,16,0,26,0,35,0,39,0,41,0,48,0,59,0,64,0,65,0,73,0,83,0,90,0,101,0,115,0,131,0,147,0,156,0,167,0,182,0,188,0,183,0,175,0,166,0,161,0,156,0,150,0,145,0,132,0,107,0,70,0,37,0,13,255,252,255,233,255,219,255,216,255,215,255,211,255,210,255,216,255,218,255,213,255,211,255,212,255,214,255,215,255,213,255,212,255,213,255,212]);
		   var a = new Uint16Array([3,232,0,1,0,6,0,8,0,13,0,17,0,27,0,28,0,41,0,44,0,56,0,66,0,79,0,86,0,106,0,114,0,138,0,162,0,192,0,213,0,224,0,206,0,198,0,189,0,164,0,99,0,43,0,15,255,248,255,248,255,248,255,252,255,246,255,254,255,244,255,253,255,247,255,252,255,247,255,249,255,248,255,254,255,247,255,252,255,247,255,250,255,249,255,249,255,252,255,251,255,249,255,250,255,253,255,249,255,252,255,247,255,252,255,249,255,250,255,251,0,27,0,58,0,89,0,105,0,115,0,106,0,97,0,71,0,40,0,2,255,249,255,248,255,249,255,246,255,247,255,252,255,248,255,250,255,248,255,245,255,123,255,172,1,28,2,167,3,103,1,253,0,80,255,44,255,184,255,244,255,241,255,247,255,242,255,245,255,244,255,249,255,252,0,2,0,6,0,10,0,17,0,21,0,38,0,42,0,55,0,59,0,81,0,85,0,103,0,112,0,149,0,170,0,197,0,206,0,205,0,182,0,184,0,154,0,96,0,35,0,2,255,240,255,240,255,239,255,234,255,240,255,240,255,240,255,235,255,243,255,237,255,241,255,238,255,242,255,237,255,242,255,236,255,239,255,239,255,238,255,236,255,242,255,238,255,242,255,238,255,240,255,239,255,239,255,243,255,239,255,239,255,238,255,246,0,4,0,49,0,68,0,95,0,97,0,104,0,82,0,72,0,33,0,0,255,237,255,242,255,237,255,237,255,238,255,237,255,239,255,235,255,243,255,233,255,139,255,119,0,225,2,107,3,105,2,43,0,128,255,32,255,156,255,230,255,238,255,233,255,238,255,234,255,238,255,237,255,241,255,243,255,253,0,3,0,7,0,12,0,23,0,32,0,40,0,51,0,59,0,78,0,86,0,107,0,127,0,166,0,181,0,207,0,191,0,183,0,167,0,158,0,97,0,36,0,0,255,235,255,230,255,228,255,230,255,229,255,231,255,230,255,232,255,227,255,235,255,227,255,231,255,228,255,232,255,226,255,231,255,228,255,233,255,226,255,231,255,226,255,232,255,226,255,229,255,227,255,231,255,228,255,233,255,229,255,230,255,234,255,233,255,252,0,32,0,64,0,77,0,98,0,91,0,86,0,61,0,38,255,249,255,234,255,228,255,235,255,230,255,232,255,228,255,232,255,231,255,229,255,228,255,150,255,84,0,170,2,45,3,100,2,91,0,177,255,59,255,118,255,224,255,223,255,228,255,221,255,228,255,226,255,234,255,235,255,243,255,242,255,252,0,1,0,8,0,14,0,24,0,33,0,45,0,57,0,70,0,84,0,91,0,121,0,150,0,176,0,192,0,193,0,174,0,169,0,150,0,98,0,26,255,254,255,222,255,223,255,223,255,227,255,222,255,223,255,220,255,221,255,220,255,225,255,222,255,226,255,224,255,224,255,222,255,227,255,224,255,224,255,223,255,223,255,221,255,223,255,224,255,224,255,228,255,225,255,225,255,223,255,228,255,221,255,231,255,228,0,3,0,40,0,62,0,76,0,86,0,82,0,71,0,49,0,13,255,233,255,224,255,223,255,226,255,223,255,222,255,224,255,226,255,226,255,218,255,214,255,83,255,182,1,44,2,186,3,51,1,189,0,12,255,16,255,174,255,222,255,215,255,220,255,220,255,222,255,223,255,228,255,227,255,234,255,241,255,249,255,251,0,6,0,16,0,20,0,32,0,38,0,57,0,68,0,79,0,96,0,129,0,148,0,178,0,185,0,174,0,163,0,155,0,130,0,65,0,9,255,240,255,217,255,216,255,217,255,216,255,218,255,213,255,216,255,215,255,221,255,214,255,218,255,219,255,220,255,214,255,220,255,215,255,222,255,218,255,219,255,220,255,222,255,217,255,218,255,217,255,218,255,216,255,214,255,224,255,219,255,223,255,218,255,224,255,245,0,28,0,50,0,79,0,77,0,81,0,65,0,49,0,14,255,234,255,220,255,222,255,216,255,221,255,215,255,223,255,218,255,222,255,219,255,214,255,101,255,128,0,249,2,119,3,82,1,239,0,71,255,11,255,149,255,213,255,217,255,214,255,216,255,216,255,217,255,216,255,226,255,227,255,235,255,241,255,247,0,0,0,6,0,14,0,26,0,39,0,48,0,64,0,73,0,90,0,115,0,147,0,167,0,188,0,175,0,161,0,150,0,132,0,70,0,13,255,233,255,216,255,211,255,216,255,213,255,212,255,215,255,212,255,212,255,210,255,213,255,211,255,216,255,208,255,215,255,213,255,216,255,210,255,215,255,211,255,215,255,211,255,218,255,215,255,218,255,212,255,215,255,214,255,216,255,214,255,215,255,215,255,216,255,239,0,19,0,50,0,69,0,77,0,76,0,65,0,46,0,19,255,232,255,219,255,213,255,216,255,213,255,217,255,212,255,218,255,217,255,215,255,210,255,119,255,90,0,185,2,73,3,80,2,39,0,116,255,21,255,119,255,212,255,208,255,214,255,209,255,215,255,215,255,222,255,220,255,228,255,228,255,238,255,239,255,250,0,0,0,14,0,20,0,31,0,44,0,55,0,69,0,83,0,111,0,137,0,162,0,182,0,172,0,156,0,154,0,131,0,78,0,11,255,237,255,212,255,211,255,204,255,212,255,207,255,211,255,209,255,210,255,206,255,209,255,211,255,208,255,210,255,210,255,215,255,208,255,215,255,205,255,214,255,210,255,215,255,209,255,214,255,207,255,214,255,211,255,213,255,215,255,211,255,212,255,216,255,215,255,233,0,10,0,44,0,63,0,79,0,68,0,56,0,34,0,0,255,217,255,214,255,211,255,213,255,211,255,211,255,214,255,209,255,216,255,213,255,201,255,58,255,200,1,72,2,212,3,18,1,133,255,219,255,16,255,175,255,214,255,207,255,211,255,207,255,214,255,212,255,216,255,218,255,221,255,228,255,234,255,244,255,248,0,3,0,11,0,28,0,27,0,47,0,54,0,70,0,90,0,119,0,142,0,173,0,175,0,166,0,149,0,144,0,114,0,48,255,254,255,224,255,207,255,205,255,207,255,205,255,207,255,206,255,209,255,206,255,207,255,208,255,211,255,207,255,209,255,203,255,209,255,208,255,211,255,206,255,209,255,209,255,211,255,207,255,207,255,207,255,208,255,211,255,211,255,211,255,207,255,207,255,206,255,214,255,240,0,25,0,44,0,68,0,68,0,72,0,51,0,32,255,251,255,223,255,206,255,210,255,208,255,212,255,211,255,211,255,212,255,208,255,210,255,202,255,74,255,154,1,32,2,159,3,47,1,178,0,7,255,0,255,163,255,201,255,210,255,202,255,208,255,206,255,209,255,209,255,217,255,222,255,225,255,230,255,237,255,245,255,254,0,12,0,17,0,29,0,42,0,55,0,64,0,85,0,110,0,141,0,164,0,180,0,158,0,155,0,139,0,116,0,54,0,0,255,224,255,206,255,198,255,208,255,203,255,205,255,205,255,202,255,205,255,205,255,204,255,203,255,206,255,203,255,207,255,204,255,209,255,204,255,209,255,205,255,211,255,205,255,209,255,206,255,207,255,206,255,206,255,205,255,207,255,208,255,211,255,208,255,211,255,237,0,19,0,45,0,58,0,68,0,66,0,57,0,31,0,7,255,218,255,210,255,206,255,213,255,207,255,212,255,206,255,208,255,206,255,208,255,205,255,88,255,119,0,234,2,113,3,67,1,223,0,57,255,3,255,137,255,205,255,203,255,208,255,204,255,206,255,204,255,213,255,212,255,224,255,221,255,231,255,232,255,245,255,250,0,7,0,15,0,26,0,34,0,47,0,63,0,76,0,106,0,134,0,159,0,171,0,163,0,146,0,145,0,121,0,62,0,0,255,227,255,200,255,204,255,201,255,203,255,205,255,201,255,202,255,200,255,201,255,207,255,201,255,204,255,206,255,205,255,208,255,203,255,206,255,205,255,207,255,207,255,207,255,201,255,204,255,205,255,208,255,197,255,208,255,206,255,207,255,203,255,206,255,205,255,230,0,12,0,36,0,62,0,70,0,70,0,55,0,39,0,3,255,226,255,203,255,208,255,204,255,208,255,205,255,208,255,203,255,206,255,204,255,209,255,109,255,91,0,186,2,68,3,73,2,23,0,101,255,13,255,124,255,200,255,201,255,204,255,206,255,201,255,210,255,204,255,216,255,221,255,226,255,230,255,238,255,245,0,0,0,4,0,17,0,26,0,41,0,50,0,70,0,86,0,117,0,139,0,169,0,169,0,158,0,143,0,139,0,96,0,37,255,242,255,214,255,201,255,200,255,200,255,202,255,202,255,199,255,201,255,201,255,201,255,198,255,205,255,200,255,201,255,200,255,204,255,200,255,204,255,201,255,204,255,204,255,205,255,203,255,203,255,202,255,205,255,201,255,206,255,204,255,205,255,206,255,207,255,209,255,241,0,26,0,43,0,63,0,65,0,66,0,43,0,27,255,243,255,213,255,203]);
		   var msg = Buffer(a,'binary');
		   conct.sendBinary(msg);
		});
	});
	conn.on('close', function (code, reason) {
		console.log('Chunk connection closed.', new Date().toLocaleTimeString(), 'code: ', code);
	});

	conn.on('error', function (err) {
		// only throw if something else happens than Connection Reset
		if (err.code !== 'ECONNRESET') {
			console.log('Error in Chunk Socket connection', err);
			throw  err;
		}
	})
}).listen(3007, function () {
	console.log('Chunk socketserver running on localhost:3007');
});
